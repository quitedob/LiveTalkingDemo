// 简化的WebRTC客户端 - 删除所有自动断开机制\nvar pc = null;\n\nfunction negotiate() {\n    pc.addTransceiver('video', { direction: 'recvonly' });\n    pc.addTransceiver('audio', { direction: 'recvonly' });\n    return pc.createOffer().then((offer) => {\n        return pc.setLocalDescription(offer);\n    }).then(() => {\n        // wait for ICE gathering to complete\n        return new Promise((resolve) => {\n            if (pc.iceGatheringState === 'complete') {\n                resolve();\n            } else {\n                const checkState = () => {\n                    if (pc.iceGatheringState === 'complete') {\n                        pc.removeEventListener('icegatheringstatechange', checkState);\n                        resolve();\n                    }\n                };\n                pc.addEventListener('icegatheringstatechange', checkState);\n            }\n        });\n    }).then(() => {\n        var offer = pc.localDescription;\n        return fetch('/offer', {\n            body: JSON.stringify({\n                sdp: offer.sdp,\n                type: offer.type,\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST'\n        });\n    }).then((response) => {\n        return response.json();\n    }).then((answer) => {\n        document.getElementById('sessionid').value = answer.sessionid;\n        console.log('WebRTC会话已建立，会话ID:', answer.sessionid);\n        return pc.setRemoteDescription(answer);\n    }).catch((e) => {\n        console.error('WebRTC协商失败:', e);\n    });\n}\n\nfunction start() {\n    console.log('开始建立WebRTC连接...');\n    \n    var config = {\n        sdpSemantics: 'unified-plan'\n    };\n\n    if (document.getElementById('use-stun').checked) {\n        config.iceServers = [{urls: ['stun:stun.l.google.com:19302']}];\n    }\n\n    pc = new RTCPeerConnection(config);\n\n    // connect audio / video\n    pc.addEventListener('track', (evt) => {\n        console.log('收到媒体轨道:', evt.track.kind);\n        if (evt.track.kind == 'video') {\n            document.getElementById('video').srcObject = evt.streams[0];\n            console.log('视频流已连接');\n        } else {\n            document.getElementById('audio').srcObject = evt.streams[0];\n            console.log('音频流已连接');\n        }\n    });\n\n    // 简化的连接状态监听 - 只记录状态，不做任何自动操作\n    pc.addEventListener('connectionstatechange', () => {\n        const state = pc.connectionState;\n        console.log('WebRTC连接状态变更:', state);\n        \n        // 更新连接状态显示（如果存在）\n        const connectionStatus = document.getElementById('connection-status');\n        if (connectionStatus) {\n            connectionStatus.textContent = `WebRTC状态: ${state}`;\n        }\n        \n        // 只记录状态，不做任何自动断开或重连操作\n        switch (state) {\n            case 'new':\n                console.log('WebRTC连接初始化');\n                break;\n            case 'connecting':\n                console.log('WebRTC正在连接...');\n                break;\n            case 'connected':\n                console.log('WebRTC连接已建立成功');\n                break;\n            case 'disconnected':\n                console.log('WebRTC连接断开（可能是临时的）');\n                break;\n            case 'failed':\n                console.log('WebRTC连接失败');\n                break;\n            case 'closed':\n                console.log('WebRTC连接已关闭');\n                break;\n        }\n    });\n\n    // ICE连接状态监听 - 只记录，不做操作\n    pc.addEventListener('iceconnectionstatechange', () => {\n        const state = pc.iceConnectionState;\n        console.log('ICE连接状态变更:', state);\n        \n        switch (state) {\n            case 'new':\n                console.log('ICE连接初始化');\n                break;\n            case 'checking':\n                console.log('ICE连接检查中...');\n                break;\n            case 'connected':\n                console.log('ICE连接已建立');\n                break;\n            case 'completed':\n                console.log('ICE连接完成');\n                break;\n            case 'disconnected':\n                console.log('ICE连接断开');\n                break;\n            case 'failed':\n                console.log('ICE连接失败');\n                break;\n            case 'closed':\n                console.log('ICE连接已关闭');\n                break;\n        }\n    });\n\n    // ICE候选者事件\n    pc.addEventListener('icecandidate', (event) => {\n        if (event.candidate) {\n            console.log('收到ICE候选者:', event.candidate.type);\n        } else {\n            console.log('ICE候选者收集完成');\n        }\n    });\n\n    // 更新UI\n    const startBtn = document.getElementById('start');\n    const stopBtn = document.getElementById('stop');\n    \n    if (startBtn) startBtn.style.display = 'none';\n    if (stopBtn) stopBtn.style.display = 'inline-block';\n    \n    // 开始协商\n    negotiate();\n}\n\nfunction stop() {\n    console.log('用户主动断开WebRTC连接');\n    \n    // 关闭peer connection\n    if (pc) {\n        pc.close();\n        pc = null;\n    }\n    \n    // 清空会话ID\n    const sessionIdInput = document.getElementById('sessionid');\n    if (sessionIdInput) {\n        sessionIdInput.value = '';\n    }\n    \n    // 清空媒体流\n    const video = document.getElementById('video');\n    const audio = document.getElementById('audio');\n    if (video) video.srcObject = null;\n    if (audio) audio.srcObject = null;\n    \n    // 更新UI\n    const startBtn = document.getElementById('start');\n    const stopBtn = document.getElementById('stop');\n    \n    if (startBtn) {\n        startBtn.style.display = 'inline-block';\n        startBtn.disabled = false;\n        startBtn.textContent = '开始连接';\n    }\n    if (stopBtn) stopBtn.style.display = 'none';\n    \n    // 更新连接状态显示\n    const connectionStatus = document.getElementById('connection-status');\n    if (connectionStatus) {\n        connectionStatus.textContent = 'WebRTC状态: 未连接';\n    }\n    \n    console.log('WebRTC连接已断开');\n}\n\n// 重连函数（供手动调用）\nfunction reconnect() {\n    console.log('手动重连WebRTC...');\n    stop();\n    setTimeout(() => {\n        start();\n    }, 1000);\n}\n\n// 导出函数供全局使用\nif (typeof window !== 'undefined') {\n    window.start = start;\n    window.stop = stop;\n    window.reconnect = reconnect;\n    window.pc = pc;\n}\n"